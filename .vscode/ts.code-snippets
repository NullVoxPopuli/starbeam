{
  // Place your starbeam workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "todo": {
    "scope": "typescript",
    "prefix": "???",
    "body": ["throw Error('todo: $1')"],
    "description": "Throw an error to indicate not yet implemented"
  },
  "class generic": {
    "scope": "typescript",
    "prefix": "class<T>",
    "body": [
      "export class ${1:name}<T> ",
      "${2|implements,extends|} ${3:super}",
      "{",
      "  static create<T>(${4:value}: T): ${1}<T> {",
      "    return new ${1}();",
      "  }",
      "}"
    ]
  },
  "class": {
    "scope": "typescript",
    "prefix": "class:",
    "body": [
      "export class ${1:name} ",
      "${2|implements,extends|} ${3:super}",
      "{",
      "  static create(): ${1} {",
      "    return new ${1}();",
      "  }",
      "}"
    ]
  },
  "static create": {
    "scope": "typescript",
    "prefix": "static create",
    "body": [
      "static create$2($4): $1 ${2:<$3>} {",
      "  return new $1(${4/\\s*([^,:]+)([:][ ]*([^,:]+))?\\s*[,]?\\s*/$1,/g})",
      "}"
    ]
  },
  "constructor": {
    "scope": "typescript",
    "prefix": "private constructor",
    "body": [
      "${1/\\s*([^,:]+)([:][ ]*([^,:]+))?\\s*[,]?\\s*/readonly #$1: $3;/g}",
      "",
      "private constructor($1) {",
      "${1/\\s*([^,:]+)([:][ ]*([^,:]+))?\\s*[,]?\\s*/this.#$1 = $1;/g}",
      "}",
      ""
    ]
  },
  "get": {
    "scope": "typescript",
    "prefix": "get:",
    "body": ["get $1(): $2 {", "$3", "}"]
  },
  "private get": {
    "scope": "typescript",
    "prefix": "#get",
    "body": ["get #$1(): $2 {", "$3", "}"]
  },
  "brand": {
    "scope": "typescript",
    "prefix": "brand:",
    "body": ["readonly [$1] = $1;"]
  }
}
